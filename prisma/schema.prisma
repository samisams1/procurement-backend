// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  firstName   String
  lastName    String
  phoneNumber String
  address     String
  email       String   @unique
  password    String
  role        RoleEnum
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roleId      Int?
  status Status @default(PENDING)
  suppliers        Supplier[]       @relation("UserSuppliers")
  purchaseRequests PurchaseRequest[]
  quotations Quotation[]
  order Order[]
  notifications Notification[]
  shippings   Shipping[]
  payments    Payment[]
  isVerified  Boolean       @default(false)
  verification Verification?
  resetPasswordToken String?


}

model PurchaseRequest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  products  Product[]
  suppliers Supplier[]
  status  String
  remark String? @default("NA")
  addressDetail String? @default("NA")
  estimatedDelivery   String? @default("NA")
  imageUrl  String?
  quotation Quotation[]   @relation("PurchaseRequests")
  referenceNumber   String? @default("NA")
  orders     Order[]

}
model Quotation {
  id          Int       @id @default(autoincrement())
  supplier    Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId  Int?
  customer    User?  @relation(fields: [customerId], references: [id])
  customerId  Int?
  shippingPrice Float?
  createdAt   DateTime  @default(now())
  productPrices ProductPrice[]
  status  String
  purchaseRequestId           Int?
  purchaseRequest             PurchaseRequest?            @relation("PurchaseRequests", fields: [purchaseRequestId], references: [id])
  
}
model Product {
  id         Int              @id @default(autoincrement())
  title      String
  code        String @default("NA")
  partNumber  String @default("NA")
  uom  String @default("NA")
  quantity Float @default(1)
  mark  String? @default("NA")
  Description  String? @default("NA")
  manufacturer  String? @default("NA")
  model  String? @default("NA")
  requestId  Int
  request    PurchaseRequest? @relation(fields: [requestId], references: [id])
  productPrices ProductPrice[] 
  orderDetails OrderDetail[] 
  status  String? @default("wait")
}
model ProductPrice {
  id          Int                 @id @default(autoincrement())
  productId   Int
  product     Product             @relation(fields: [productId], references: [id])
  price       Float
  quotation   Quotation           @relation(fields: [quotationId], references: [id])
  quotationId Int
  status  String? @default("wait")
}
model Supplier {
  id              Int              @id @default(autoincrement())
  userId           Int?
  user             User?            @relation("UserSuppliers", fields: [userId], references: [id])
  name             String?
  purchaseRequest  PurchaseRequest[]
  quotations       Quotation[]
  order            Order[]
  categoryId       Int?
  category         Category?        @relation("CategorySuppliers", fields: [categoryId], references: [id])
}
model Order {
  id            Int               @id @default(autoincrement())
  customerId    Int
  customer        User            @relation(fields: [customerId], references: [id])
  supplierId    Int
  supplier        Supplier            @relation(fields: [supplierId], references: [id])
  totalPrice Int
  tax         Float
  shippingCost Float
  status        String
  createdAt     DateTime          @default(now())
  orderDetails OrderDetail[]
  updatedAt DateTime  @updatedAt
  referenceNumber   String? @default("NA")
  shippings   Shipping[]
  purchaseRequestId Int?              @default(1)
  purchaseRequest   PurchaseRequest?  @relation(fields: [purchaseRequestId], references: [id])
  payments    Payment[]

}
model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  title     String
  price     Float
  quantity  Int
  productId   Int  @default(1)
  product     Product             @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt DateTime  @updatedAt
}
model Category {
  id        Int     @id @default(autoincrement())
  name     String  @unique
  createdAt     DateTime          @default(now())
  suppliers        Supplier[]       @relation("CategorySuppliers")
}
model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  recipient  User      @relation(fields: [recipientId], references: [id])
  recipientId Int
  timestamp DateTime @default(now())
  status String? @default("NA")
}

model Shipping {
  id          Int        @id @default(autoincrement())
  orderId     Int
  order       Order      @relation(fields: [orderId], references: [id])
  address     String
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  status String? @default("pending")
}
model Payment {
  id          Int        @id @default(autoincrement())
  amount      Float
  paidAt      DateTime   @default(now())
  paymentMethod     String?    // New field for payment method
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  orderId   Int  @default(1)
  order     Order      @relation(fields: [orderId], references: [id])
  status String? @default("pending")
  referenceNumber   String? @default("NA")
  fullName  String
}
model Verification {
  id       Int      @id @default(autoincrement())
  token    String   @unique
  userId   Int      @unique
  user     User     @relation(fields: [userId], references: [id])
}
model ForgotPassword {
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
}
enum RoleEnum {
  ADMIN
  CUSTOMER
  SUPPLIER
}
enum Status {
  PENDING
  ACTIVE
  APPROVED
  DISABLED
}
