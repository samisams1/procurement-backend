// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  firstName   String
  lastName    String
  phoneNumber String
  address     String
  email       String   @unique
  password    String
  role        RoleEnum
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roleId      Int?
  status Status @default(PENDING)
  suppliers        Supplier[]       @relation("UserSuppliers")
  purchaseRequests PurchaseRequest[]
  quotations Quotation[]
  order Order[]
}

model PurchaseRequest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  products  Product[]
  suppliers Supplier[]
  status  String

}
model Quotation {
  id          Int       @id @default(autoincrement())
  supplier    Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId  Int?
  customer    User?  @relation(fields: [customerId], references: [id])
  customerId  Int?
  shippingPrice Float?
  createdAt   DateTime  @default(now())
  productPrices ProductPrice[]
  status  String

}
model Product {
  id         Int              @id @default(autoincrement())
  title      String
  code        String @default("NA")
  partNumber  String @default("NA")
  uom  String @default("NA")
  quantity Float @default(1)
  mark  String? @default("NA")
  Description  String? @default("NA")
  manufacturer  String? @default("NA")
  model  String? @default("NA")
  requestId  Int
  request    PurchaseRequest? @relation(fields: [requestId], references: [id])
  productPrices ProductPrice[]
}
model ProductPrice {
  id          Int                 @id @default(autoincrement())
  productId   Int
  product     Product             @relation(fields: [productId], references: [id])
  price       Float
  quotation   Quotation           @relation(fields: [quotationId], references: [id])
  quotationId Int
  status  String? @default("wait")

}
model Supplier {
  id              Int              @id @default(autoincrement())
  userId           Int?
  user             User?            @relation("UserSuppliers", fields: [userId], references: [id])
  purchaseRequest PurchaseRequest[]
  quotations Quotation[]
  order Order[]

}
model Order {
  id            Int               @id @default(autoincrement())
  customerId    Int
  customer        User            @relation(fields: [customerId], references: [id])
  supplierId    Int
  supplier        Supplier            @relation(fields: [supplierId], references: [id])
  totalPrice Int
  tax         Float
  shippingCost Float
  status        String
  createdAt     DateTime          @default(now())
  orderDetails OrderDetail[]
  updatedAt DateTime  @updatedAt
}
model OrderDetail {
  id        Int     @id @default(autoincrement())
  orderId   Int
  title     String
  price     Float
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt DateTime  @updatedAt
}
enum RoleEnum {
  ADMIN
  CUSTOMER
  SUPPLIER
}

enum Status {
  PENDING
  ACTIVE
  APPROVED
  DISABLED
}